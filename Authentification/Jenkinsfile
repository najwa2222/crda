pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub_credentials' // ID des credentials Docker Hub dans Jenkins
        DOCKER_IMAGE = 'najwakarrouchi968/authentification'
        KUBECONFIG_CREDENTIALS_ID = 'kubeconfig_credentials' // ID des credentials Kubeconfig dans Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                // Récupérer le code source
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                // Installer les dépendances
                sh 'npm install'
            }
        }
        
        stage('Run Tests') {
            steps {
                // Exécuter les tests
                sh 'npm test'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Construire l'image Docker
                    def app = docker.build("${env.DOCKER_IMAGE}:latest")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', "${env.DOCKER_CREDENTIALS_ID}") {
                        // Pousser l'image Docker sur Docker Hub
                        def app = docker.image("${env.DOCKER_IMAGE}:latest")
                        app.push()
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: "${env.KUBECONFIG_CREDENTIALS_ID}", variable: 'KUBECONFIG')]) {
                    // Déployer sur Kubernetes
                    sh 'kubectl set image deployment/authentification authentification=${DOCKER_IMAGE}:latest --kubeconfig=$KUBECONFIG'
                    sh 'kubectl rollout status deployment/authentification --kubeconfig=$KUBECONFIG'
                }
            }
        }
    }

    post {
        always {
            // Archiver les rapports de test, les journaux, etc.
            junit '**/test-results.xml'
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
        }
        success {
            echo 'Pipeline réussi!'
        }
        failure {
            echo 'Pipeline échoué!'
        }
    }
}
