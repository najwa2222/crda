pipeline {
    agent any
    
    environment {
        DOCKER_PATH = "C:\\Programmes\\Docker\\cli-plugins"
        PATH = "C:\\Program Files\\nodejs;${DOCKER_PATH};${PATH}"
        SONAR_SCANNER_HOME = "C:\\Program Files\\sonarqube-developer-10.5.1.90531\\sonarqube-10.5.1.90531"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git branch: 'master', credentialsId: 'github-credentials', url: 'https://github.com/najwa2222/crda.git'
                }
            }
        }
        
        stage('Install Dependencies and Run Tests') {
            steps {
                script {
                    bat 'npm install'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarquabe') {
                    bat "\"${SONAR_SCANNER_HOME}\\bin\\sonar-scanner\" -Dsonar.projectKey=remote"
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Construire l'image Docker
                    bat 'docker build -t nom_image:tag .'
                }
            }
        }
        
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Se connecter à Docker Hub avec les identifiants appropriés
                    withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        bat "echo %DOCKER_HUB_PASSWORD% | docker login -u %DOCKER_HUB_USER% --password-stdin"
                    }

                    // Pousser l'image Docker
                    bat "docker push ${imageName}"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline terminé avec succès.'
        }
        failure {
            echo 'Pipeline échoué.'
        }
    }
}
