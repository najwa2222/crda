pipeline {
    agent any

    environment {
        KUBERNETES_NAMESPACE = 'gestiondocuments'
        KUBERNETES_DEPLOYMENT = 'backend'
        DOCKER_IMAGE = 'najwakarrouchi/gestiondocuments'
        DOCKER_TAG = 'latest'
        KUBECONFIG = 'C:\\Users\\acer\\.kube\\config'
        DOCKERFILE_PATH = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\app\\backend\\GestionDocuments\\Dockerfile'
        YAML_FOLDER_PATH = "C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\test\\kubernetes\\"
    }

    stages {
        stage('Set Up Environment') {
            steps {
                script {
                    echo "Configuration de l'environnement..."
                    bat "echo Configuration du chemin Docker : ${DOCKERFILE_PATH}"
                    bat "echo Configuration de KUBECONFIG : ${KUBECONFIG}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Construction de l'image Docker..."
                    bat "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -f ${DOCKERFILE_PATH.replace('\\', '/')} ."
                }
            }
        }

        stage('Verify Docker Image') {
            steps {
                script {
                    echo "Vérification et récupération de l'image Docker..."
                    bat """
                    docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                    docker images ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }

        stage('Deploy with kubectl') {
            steps {
                script {
                    // Liste des fichiers YAML à déployer
                    def yamlFiles = [
                        'deployment-api-gateway.yaml',
                        'deployment-auth.yaml',
                        'deployment-controllers.yaml',
                        'deployment-enregistrement.yaml',
                        'deployment-gestiondocument.yaml',
                        'deployment-monitoring.yaml',
                        'deployment-notification.yaml',
                        'deployment-recherche.yaml',
                        'grafana-deployment.yaml',
                        'mysql-deployment.yaml',
                        'prometheus-deployment.yaml'
                    ]
                    
                    // Parcourir chaque fichier YAML et le déployer
                    yamlFiles.each { fileName ->
                        def filePath = "${YAML_FOLDER_PATH}${fileName}"
                        if (fileExists(filePath)) {
                            echo "Déploiement du fichier YAML : ${fileName}"
                            // Appliquer le fichier YAML de déploiement
                            bat "kubectl apply -f ${filePath} -n ${KUBERNETES_NAMESPACE}"
                        } else {
                            error "Le fichier YAML ${fileName} n'existe pas."
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline terminée"
        }
    }
}

// Fonction pour vérifier si un fichier existe
def fileExists(filePath) {
    return file(filePath).exists()
}
